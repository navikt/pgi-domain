/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.samordning.pgi.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Metadata for pgi */
@org.apache.avro.specific.AvroGenerated
public class HendelseMetadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4780363220727645794L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HendelseMetadata\",\"namespace\":\"no.nav.samordning.pgi.schema\",\"doc\":\"Metadata for pgi\",\"fields\":[{\"name\":\"retries\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long retries;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HendelseMetadata() {}

  /**
   * All-args constructor.
   * @param retries The new value for retries
   */
  public HendelseMetadata(java.lang.Long retries) {
    this.retries = retries;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return retries;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: retries = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'retries' field.
   * @return The value of the 'retries' field.
   */
  public java.lang.Long getRetries() {
    return retries;
  }

  /**
   * Sets the value of the 'retries' field.
   * @param value the value to set.
   */
  public void setRetries(java.lang.Long value) {
    this.retries = value;
  }

  /**
   * Creates a new HendelseMetadata RecordBuilder.
   * @return A new HendelseMetadata RecordBuilder
   */
  public static no.nav.samordning.pgi.schema.HendelseMetadata.Builder newBuilder() {
    return new no.nav.samordning.pgi.schema.HendelseMetadata.Builder();
  }

  /**
   * Creates a new HendelseMetadata RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HendelseMetadata RecordBuilder
   */
  public static no.nav.samordning.pgi.schema.HendelseMetadata.Builder newBuilder(no.nav.samordning.pgi.schema.HendelseMetadata.Builder other) {
    return new no.nav.samordning.pgi.schema.HendelseMetadata.Builder(other);
  }

  /**
   * Creates a new HendelseMetadata RecordBuilder by copying an existing HendelseMetadata instance.
   * @param other The existing instance to copy.
   * @return A new HendelseMetadata RecordBuilder
   */
  public static no.nav.samordning.pgi.schema.HendelseMetadata.Builder newBuilder(no.nav.samordning.pgi.schema.HendelseMetadata other) {
    return new no.nav.samordning.pgi.schema.HendelseMetadata.Builder(other);
  }

  /**
   * RecordBuilder for HendelseMetadata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HendelseMetadata>
    implements org.apache.avro.data.RecordBuilder<HendelseMetadata> {

    private long retries;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.samordning.pgi.schema.HendelseMetadata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.retries)) {
        this.retries = data().deepCopy(fields()[0].schema(), other.retries);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HendelseMetadata instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.samordning.pgi.schema.HendelseMetadata other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.retries)) {
        this.retries = data().deepCopy(fields()[0].schema(), other.retries);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'retries' field.
      * @return The value.
      */
    public java.lang.Long getRetries() {
      return retries;
    }

    /**
      * Sets the value of the 'retries' field.
      * @param value The value of 'retries'.
      * @return This builder.
      */
    public no.nav.samordning.pgi.schema.HendelseMetadata.Builder setRetries(long value) {
      validate(fields()[0], value);
      this.retries = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'retries' field has been set.
      * @return True if the 'retries' field has been set, false otherwise.
      */
    public boolean hasRetries() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'retries' field.
      * @return This builder.
      */
    public no.nav.samordning.pgi.schema.HendelseMetadata.Builder clearRetries() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public HendelseMetadata build() {
      try {
        HendelseMetadata record = new HendelseMetadata();
        record.retries = fieldSetFlags()[0] ? this.retries : (java.lang.Long) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
