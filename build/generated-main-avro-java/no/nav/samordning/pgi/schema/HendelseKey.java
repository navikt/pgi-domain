/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.samordning.pgi.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** https://skatteetaten.github.io/datasamarbeid-api-dokumentasjon/reference_feed */
@org.apache.avro.specific.AvroGenerated
public class HendelseKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 945205832126218954L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HendelseKey\",\"namespace\":\"no.nav.samordning.pgi.schema\",\"doc\":\"https://skatteetaten.github.io/datasamarbeid-api-dokumentasjon/reference_feed\",\"fields\":[{\"name\":\"identifikator\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gjelderPeriode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String identifikator;
  @Deprecated public java.lang.String gjelderPeriode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HendelseKey() {}

  /**
   * All-args constructor.
   * @param identifikator The new value for identifikator
   * @param gjelderPeriode The new value for gjelderPeriode
   */
  public HendelseKey(java.lang.String identifikator, java.lang.String gjelderPeriode) {
    this.identifikator = identifikator;
    this.gjelderPeriode = gjelderPeriode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifikator;
    case 1: return gjelderPeriode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifikator = (java.lang.String)value$; break;
    case 1: gjelderPeriode = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identifikator' field.
   * @return The value of the 'identifikator' field.
   */
  public java.lang.String getIdentifikator() {
    return identifikator;
  }

  /**
   * Sets the value of the 'identifikator' field.
   * @param value the value to set.
   */
  public void setIdentifikator(java.lang.String value) {
    this.identifikator = value;
  }

  /**
   * Gets the value of the 'gjelderPeriode' field.
   * @return The value of the 'gjelderPeriode' field.
   */
  public java.lang.String getGjelderPeriode() {
    return gjelderPeriode;
  }

  /**
   * Sets the value of the 'gjelderPeriode' field.
   * @param value the value to set.
   */
  public void setGjelderPeriode(java.lang.String value) {
    this.gjelderPeriode = value;
  }

  /**
   * Creates a new HendelseKey RecordBuilder.
   * @return A new HendelseKey RecordBuilder
   */
  public static no.nav.samordning.pgi.schema.HendelseKey.Builder newBuilder() {
    return new no.nav.samordning.pgi.schema.HendelseKey.Builder();
  }

  /**
   * Creates a new HendelseKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HendelseKey RecordBuilder
   */
  public static no.nav.samordning.pgi.schema.HendelseKey.Builder newBuilder(no.nav.samordning.pgi.schema.HendelseKey.Builder other) {
    return new no.nav.samordning.pgi.schema.HendelseKey.Builder(other);
  }

  /**
   * Creates a new HendelseKey RecordBuilder by copying an existing HendelseKey instance.
   * @param other The existing instance to copy.
   * @return A new HendelseKey RecordBuilder
   */
  public static no.nav.samordning.pgi.schema.HendelseKey.Builder newBuilder(no.nav.samordning.pgi.schema.HendelseKey other) {
    return new no.nav.samordning.pgi.schema.HendelseKey.Builder(other);
  }

  /**
   * RecordBuilder for HendelseKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HendelseKey>
    implements org.apache.avro.data.RecordBuilder<HendelseKey> {

    private java.lang.String identifikator;
    private java.lang.String gjelderPeriode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.samordning.pgi.schema.HendelseKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifikator)) {
        this.identifikator = data().deepCopy(fields()[0].schema(), other.identifikator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gjelderPeriode)) {
        this.gjelderPeriode = data().deepCopy(fields()[1].schema(), other.gjelderPeriode);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HendelseKey instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.samordning.pgi.schema.HendelseKey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.identifikator)) {
        this.identifikator = data().deepCopy(fields()[0].schema(), other.identifikator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gjelderPeriode)) {
        this.gjelderPeriode = data().deepCopy(fields()[1].schema(), other.gjelderPeriode);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'identifikator' field.
      * @return The value.
      */
    public java.lang.String getIdentifikator() {
      return identifikator;
    }

    /**
      * Sets the value of the 'identifikator' field.
      * @param value The value of 'identifikator'.
      * @return This builder.
      */
    public no.nav.samordning.pgi.schema.HendelseKey.Builder setIdentifikator(java.lang.String value) {
      validate(fields()[0], value);
      this.identifikator = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifikator' field has been set.
      * @return True if the 'identifikator' field has been set, false otherwise.
      */
    public boolean hasIdentifikator() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identifikator' field.
      * @return This builder.
      */
    public no.nav.samordning.pgi.schema.HendelseKey.Builder clearIdentifikator() {
      identifikator = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'gjelderPeriode' field.
      * @return The value.
      */
    public java.lang.String getGjelderPeriode() {
      return gjelderPeriode;
    }

    /**
      * Sets the value of the 'gjelderPeriode' field.
      * @param value The value of 'gjelderPeriode'.
      * @return This builder.
      */
    public no.nav.samordning.pgi.schema.HendelseKey.Builder setGjelderPeriode(java.lang.String value) {
      validate(fields()[1], value);
      this.gjelderPeriode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'gjelderPeriode' field has been set.
      * @return True if the 'gjelderPeriode' field has been set, false otherwise.
      */
    public boolean hasGjelderPeriode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'gjelderPeriode' field.
      * @return This builder.
      */
    public no.nav.samordning.pgi.schema.HendelseKey.Builder clearGjelderPeriode() {
      gjelderPeriode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public HendelseKey build() {
      try {
        HendelseKey record = new HendelseKey();
        record.identifikator = fieldSetFlags()[0] ? this.identifikator : (java.lang.String) defaultValue(fields()[0]);
        record.gjelderPeriode = fieldSetFlags()[1] ? this.gjelderPeriode : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
